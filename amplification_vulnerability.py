import logging
import os
import sys
from threading import Thread

from scapy.layers.inet import IP, UDP

from constants import L3_SOCKET, PORTS_TO_SCAN, RTPS_PACKET

logger = logging.getLogger(__name__)
logging.basicConfig(
    filename=os.path.join(os.path.dirname(os.path.abspath(__file__)), "scanner.log"),
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s %(message)s",
    filemode="a",
)


def amplify(ip, port):
    """
    Send RTPS packet to the specified IP and port using L3_SOCKET. Using the
    same socket for sending packets speeds up the process significantly.
    """
    udp_packet = UDP(sport=33653, dport=port)
    ip_packet = IP(dst=ip)

    packet = ip_packet / udp_packet / RTPS_PACKET
    L3_SOCKET.send(packet)


def main():
    """
    Read IPs from stdin, send RTPS packets to each IP on the specified ports.
    The scanned IPs are saved to a file, and the count of scanned IPs is saved
    to another file.

    If an exception occurs, it is logged, and the script continues to the next IP.
    The script is designed to be run in a loop, reading IPs from stdin.
    """
    scanned_count = 0
    for ip in sys.stdin:
        ip = ip.strip()

        try:
            amplify_singular_ip(ip)
            with open("scanned_ips.txt", "a") as scanned_ips_f, open(
                "scanned_ip_cnt.txt", "w"
            ) as scanned_ip_cnt_f:
                scanned_count += 1
                scanned_ip_cnt_f.write(str(scanned_count))
                scanned_ips_f.write(ip + "\n")
        except Exception as e:
            logger.warning(f"Exception: {e}. Continuing onto the next IP.")


def amplify_singular_ip(ip):
    """
    Scan the ports provided in PORTS_TO_SCAN for the given IP concurrently.
    """
    for port in PORTS_TO_SCAN:
        scan_thread = Thread(target=amplify, args=[ip, port])
        scan_thread.run()


if __name__ == "__main__":
    main()
