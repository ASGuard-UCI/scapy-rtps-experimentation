import logging
import os
import random
import sys
import time

from common import (
    APP_ID,
    COLLECTOR_IP,
    DEFAULT_UNICAST_PORT,
    HOST_ID,
    INSTANCE_ID,
    METATRAFFIC_UNICAST_PORT,
)
from scapy.all import RawVal, sendpfast, send
from scapy.contrib.rtps import RTPS
from scapy.contrib.rtps.pid_types import (
    PID_BUILTIN_ENDPOINT_SET,
    PID_DEFAULT_UNICAST_LOCATOR,
    PID_ENTITY_NAME,
    PID_METATRAFFIC_UNICAST_LOCATOR,
    PID_PARTICIPANT_GUID,
    PID_PARTICIPANT_LEASE_DURATION,
    PID_PROPERTY_LIST,
    PID_PROTOCOL_VERSION,
    PID_SENTINEL,
    PID_USER_DATA,
    PID_VENDOR_ID,
    GUIDPacket,
    LocatorPacket,
)
from scapy.contrib.rtps.rtps import (
    DataPacket,
    GUIDPrefixPacket,
    ParameterListPacket,
    ProtocolVersionPacket,
    RTPSMessage,
    RTPSSubMessage_DATA,
    RTPSSubMessage_INFO_TS,
    VendorIdPacket,
)
from scapy.layers.inet import IP, UDP
from scapy.layers.l2 import Ether

logger = logging.getLogger(__name__)
logging.basicConfig(
    filename=os.path.join(os.path.dirname(os.path.abspath(__file__)), "scanner.log"),
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s %(message)s",
    filemode="a",
)


def amplify(ip, port):
    rtps_packet = RTPS(
        # Using 2.3 for protocol version since ROS 2
        protocolVersion=ProtocolVersionPacket(major=2, minor=3),
        # Vendor is eProsima - Fast-RTPS "01.15"
        vendorId=VendorIdPacket(vendor_id=RawVal("\x01\x0F")),
        # Taken directly from Wireshark packet. How are these values generated?
        guidPrefix=GUIDPrefixPacket(
            hostId=HOST_ID,
            appId=APP_ID,
            instanceId=INSTANCE_ID,
        ),
        magic=b"RTPS",
    ) / RTPSMessage(
        submessages=[
            RTPSSubMessage_INFO_TS(
                submessageId=0x09,
                submessageFlags=0x01,
                octetsToNextHeader=8,
                ts_seconds=int(time.time()),
                ts_fraction=653661355,
            ),
            RTPSSubMessage_DATA(
                submessageId=0x15,
                submessageFlags=0x05,
                octetsToNextHeader=216,
                extraFlags=0,
                octetsToInlineQoS=16,
                readerEntityIdKey=0x000100,
                readerEntityIdKind=0xC7,
                writerEntityIdKey=0x000100,
                writerEntityIdKind=0xC2,
                writerSeqNumLow=1,
                writerSeqNumHi=0,
                data=DataPacket(
                    encapsulationKind=0x0003,
                    encapsulationOptions=0x0000,
                    parameterList=ParameterListPacket(
                        parameterValues=[
                            # Each packet has a parameter ID, length, and
                            # some data associated with it
                            PID_PROTOCOL_VERSION(
                                parameterId=0x0015,
                                parameterLength=4,
                                # Version 2.3
                                protocolVersion=ProtocolVersionPacket(major=2, minor=3),
                                padding=b"\x00\x00",
                            ),
                            PID_VENDOR_ID(
                                parameterId=0x0016,
                                parameterLength=4,
                                # Vendor ID 01.15 (eProsima - Fast-RTPS)
                                vendorId=VendorIdPacket(vendor_id=RawVal("\x01\x0F")),
                                padding=b"\x00\x00",
                            ),
                            PID_PARTICIPANT_GUID(
                                parameterId=0x0050,
                                parameterLength=16,
                                guid=GUIDPacket(
                                    hostId=HOST_ID,
                                    appId=APP_ID,
                                    instanceId=INSTANCE_ID,
                                    entityId=0x000001C1,
                                ),
                            ),
                            PID_METATRAFFIC_UNICAST_LOCATOR(
                                parameterId=0x0032,
                                parameterLength=24,
                                locator=LocatorPacket(
                                    locatorKind=0x1,
                                    port=METATRAFFIC_UNICAST_PORT,
                                    address=COLLECTOR_IP,
                                ),
                            ),
                            # As described in the spec, the parameter ID of
                            # 0x0031 corresponds to the UDPv6 locator kind,
                            # which means that the IP address should be a
                            # UDPv6 address. However, Wireshark states that
                            # this parameter is unknown.
                            #
                            # PID_DEFAULT_UNICAST_LOCATOR(
                            #     parameterId=0x0031,
                            #     parameterLength=24,
                            #     locator=LocatorPacket(
                            #         locatorKind=0x00000010,
                            #         port=DEFAULT_UNICAST_PORT,
                            #         address="55",
                            #     ),
                            # ),
                            PID_DEFAULT_UNICAST_LOCATOR(
                                parameterId=0x0031,
                                parameterLength=24,
                                locator=LocatorPacket(
                                    locatorKind=0x00000001,
                                    port=DEFAULT_UNICAST_PORT,
                                    address=COLLECTOR_IP,
                                ),
                            ),
                            PID_PARTICIPANT_LEASE_DURATION(
                                parameterId=0x0002,
                                parameterLength=8,
                                parameterData=b"\x14\x00\x00\x00\x00\x00\x00\x00",
                            ),
                            PID_BUILTIN_ENDPOINT_SET(
                                parameterId=0x0058,
                                parameterLength=4,
                                parameterData=b"\x00\x0f\x0c\x3f",
                            ),
                            PID_ENTITY_NAME(
                                parameterId=0x0062,
                                parameterLength=8,
                                parameterData=b"\x02\x00\x00\x00\x2f\x00\x00\x00",
                            ),
                            PID_USER_DATA(
                                parameterId=0x002C,
                                parameterLength=16,
                                parameterData=b"\x0b\x00\x00\x00\x65\x6e\x63\x6c\x61\x76\x65\x3d\x2f\x3b\x00\x00",
                            ),
                            PID_PROPERTY_LIST(
                                parameterId=0x0059,
                                parameterLength=40,
                                parameterData=b"\x01\x00\x00\x00\x11\x00\x00\x00\x50\x41\x52\x54\x49\x43\x49\x50\x41\x4e\x54\x5f\x54\x59\x50\x45\x00\x00\x00\x00\x07\x00\x00\x00\x53\x49\x4d\x50\x4c\x45\x00\x00",
                            ),
                        ],
                        sentinel=PID_SENTINEL(parameterId=1, parameterLength=0),
                    ),
                ),
            ),
        ]
    )

    udp_packet = UDP(sport=33653, dport=port)
    ip_packet = IP(dst=ip)

    packet = Ether() / ip_packet / udp_packet / rtps_packet
    sendpfast(packet)


def main():
    scanned_count = 0
    for ip in sys.stdin:
        ip = ip.strip()

        try:
            amplify(ip, 7400)
        except Exception as e:
            logger.warning(f"Exception: {e}. Continuing onto the next IP.")
        finally:
            with open("scanned_ip_count.txt", "w") as f:
                scanned_count += 1
                f.write(str(scanned_count))


def amplify_singular_ip(ip):
    amplify(ip.strip(), 7400)
    time.sleep(random.uniform(0.1, 1))


if __name__ == "__main__":
    main()
